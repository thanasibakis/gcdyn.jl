#!/usr/bin/env Rscript

suppressPackageStartupMessages(library(treeio))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(jsonlite))

process_tree <- function(tree, compact_history=FALSE) {
	if (compact_history) {
    	history <- get.data(tree) |>
    	    select(node, history_all) |>
			rename(history = history_all) |>
    	    filter(!is.na(history)) |>
    	    rowwise() |>
    	    filter(!is.null(history)) |>
    	    ungroup() |>
    	    mutate(history = map(history,
    	        \(row) str_c(
    		        row[seq(1, length(row), 4)],
    	            row[seq(1, length(row), 4) + 1],
    	            row[seq(1, length(row), 4) + 2],
    		        row[seq(1, length(row), 4) + 3],
					sep = "|"
    	        )
    	    )) |>
    	    unnest(history) |>
    	    mutate(history = str_replace_all(history, "\\}|\\{", "")) |>
    	    separate(history, c("site", "when", "from_base", "to_base"), "\\|") |>
    	    mutate(across(c("site", "when"), as.numeric))
	} else {
    	history <- get.data(tree) |>
    	    select(node, starts_with("history")) |>
    	    pivot_longer(starts_with("history"),
   	        	names_to = "site",
        	    names_prefix = "history_",
        	    values_to = "history"
        	) |>
        	filter(!is.na(history)) |>
        	rowwise() |>
        	filter(!is.null(history)) |>
        	ungroup() |>
        	mutate(history = map(history,
        	    \(row) str_c(
        	        row[seq(1, length(row), 3)],
        	        row[seq(1, length(row), 3) + 1],
        	        row[seq(1, length(row), 3) + 2],
        	        sep = "|"
        	    )
        	)) |>
        	unnest(history) |>
        	mutate(history = str_replace_all(history, "\\}|\\{", "")) |>
        	separate(history, c("when", "from_base", "to_base"), "\\|") |>
        	mutate(across(c("site", "when"), as.numeric))
	}

    ancestry <- tibble(
		parent = get.tree(tree)$edge[, 1],
		node = get.tree(tree)$edge[, 2],
		length = get.tree(tree)$edge.length
	)

	states <- get.data(tree) |> select(node, states) |> rename(state = states)

    full_join(ancestry, states, by = "node") |>
        nest_join(history, by = "node") |>
        rename(name = node)
}

shrink_newick_line <- function(line) {
    shrunk <- line |>
        # Remove the tree-wide comment block, we won't use it
        str_replace("\\[&((lnP|c_count\\[[0-9]+\\]|c_allTransitions\\[[0-9]+\\])=[0-9.-]+,?)+\\] ", "") |>
        # Remove the count annotations on each node
        str_replace_all("count=\\{[0-9.,]+\\},?", "") |>
        # Clean up
        str_replace_all(",\\]", "]") |>
        str_replace_all("\\[&\\]", "")

    ifelse(str_starts(line, "tree"), shrunk, line)
}


compact_history = commandArgs(trailingOnly = TRUE)[1] == "--compact-history"
in_filename <- ifelse(compact_history, commandArgs(trailingOnly = TRUE)[2], commandArgs(trailingOnly = TRUE)[1])
temp_filename <- tempfile()

# This will make the next step take much less time
read_lines(in_filename) |>
    map_chr(shrink_newick_line) |>
    write_lines(temp_filename)

# This step takes the longest
trees <- read.beast(temp_filename)

trees |>
    map(process_tree, compact_history = compact_history) |>
    toJSON(digits = 10, na = "null")
